#!/usr/bin/perl
use warnings;
use strict;

my $countfile = "/Users/youzhengchuan/temp/count";
my $logfile = "/Users/youzhengchuan/temp/log";

sub getCount($) {
	my $id = $_[0];
	if ( ! -f $countfile ){
		return 0;
	}
	open F,$countfile or return 0;
	while(<F>) {
		chomp;
		if ($_ =~ /=/) {
			my ($k, $v ) = split(/\s+=\s+/, $_);
			if ($k eq $id){
				close F;
				return $v;
			}
		}
	}
	close F;
	return 0;
}

sub writeCount($$) {
	my $id = $_[0];
	my $c = $_[1];

	## read
	my %k_v = ();
	if ( -f $countfile) {
		open F,$countfile;
		while(<F>) {
			chomp;
			if ($_ =~ /=/) {
				my ($k, $v ) = split(/\s+=\s+/, $_);
				$k_v{$k} = $v;
			}
		}
		close F;
	}

	## change
	$k_v{$id} = $c;

	## write
	open F,"> $countfile" or return(0, $!);
	foreach my $k (keys %k_v) {
		printf F "%s = %s\n", $k, $k_v{$k}
	}
	close F;
	return 1;
}

sub loglog($) {
	my $c = $_[0];
	open F, ">> $logfile" or return;
	print F "$c\n";
	close F
}

sub getRandNum() {
		my $number0 = 1023;
        srand();
        my $op = int(rand(2));
        srand();
        my $rg = int(rand(10));
        my $n = 0;
        my $rang = 200;
        if ($rg < 8) {
                $rang = 50;
        }
        if ($op == 0) {
                srand();
                $n = $number0 + int( rand($rang) + $rang );
        }else{
                srand();
                $n = $number0 - int( rand($rang) + $rang );
        }
        if ($n < 0) {
                $n *= -1;
        }
        return $n;
}

sub printIfName() {
		print <<EOF;
IF-MIB::ifName.1 = STRING: te-1/1/1
IF-MIB::ifName.2 = STRING: te-1/1/2
IF-MIB::ifName.3 = STRING: te-1/1/3
IF-MIB::ifName.4 = STRING: te-1/1/4
IF-MIB::ifName.5 = STRING: te-1/1/5
EOF
}

sub printIfHCOutOctets($) {
	my $val = $_[0];
	print <<EOF;
IF-MIB::ifHCOutOctets.1 = Counter64: $val
IF-MIB::ifHCOutOctets.2 = Counter64: $val
IF-MIB::ifHCOutOctets.3 = Counter64: $val
IF-MIB::ifHCOutOctets.4 = Counter64: $val
IF-MIB::ifHCOutOctets.5 = Counter64: $val
EOF
}

sub printIfHCOutUcastPkts($) {
	my $val = $_[0];
	print <<EOF;
IF-MIB::ifHCOutUcastPkts.1 = Counter64: $val
IF-MIB::ifHCOutUcastPkts.2 = Counter64: $val
IF-MIB::ifHCOutUcastPkts.3 = Counter64: $val
IF-MIB::ifHCOutUcastPkts.4 = Counter64: $val
IF-MIB::ifHCOutUcastPkts.5 = Counter64: $val
EOF
}

sub printIfHCInOctets($) {
	my $val = $_[0];
	print <<EOF;
IF-MIB::ifHCInOctets.1 = Counter64: $val
IF-MIB::ifHCInOctets.2 = Counter64: $val
IF-MIB::ifHCInOctets.3 = Counter64: $val
IF-MIB::ifHCInOctets.4 = Counter64: $val
IF-MIB::ifHCInOctets.5 = Counter64: $val
EOF
}

sub printIfHCInUcastPkts($) {
	my $val = $_[0];
	print <<EOF;
IF-MIB::ifHCInUcastPkts.1 = Counter64: $val
IF-MIB::ifHCInUcastPkts.2 = Counter64: $val
IF-MIB::ifHCInUcastPkts.3 = Counter64: $val
IF-MIB::ifHCInUcastPkts.4 = Counter64: $val
IF-MIB::ifHCInUcastPkts.5 = Counter64: $val
EOF
}

sub printIfHighSpeed() {
	print <<EOF;
IF-MIB::ifHighSpeed.1 = Gauge32: 10000
IF-MIB::ifHighSpeed.2 = Gauge32: 10000
IF-MIB::ifHighSpeed.3 = Gauge32: 10000
IF-MIB::ifHighSpeed.4 = Gauge32: 10000
IF-MIB::ifHighSpeed.5 = Gauge32: 10000
EOF
}

sub getVal($) {
	my $val = $_[0];
	if ($val % 4 == 0) {
		return 0
	}else{
		return $val
	}
}

if ($#ARGV < 5) {
	print "$0 -v 2c -c community ip oid\n";
	exit 0;
}else{
	my $oid = $ARGV[-1];
	my $count = getCount($oid);
	my $newCount = getVal($count);
	my $counter = 0;

	if ($oid eq "1.3.6.1.2.1.31.1.1.1.1") {
		printIfName();
	}

	if ($oid eq "1.3.6.1.2.1.31.1.1.1.10") {
		printIfHCOutOctets($newCount * 1024);
		$counter = 1;
	}

	if ($oid eq "1.3.6.1.2.1.31.1.1.1.11") {
		printIfHCOutUcastPkts($newCount * 512);
		$counter = 1;
	}

	if ($oid eq "1.3.6.1.2.1.31.1.1.1.6") {
		printIfHCInOctets($newCount * 2048);
		$counter = 1;
	}

	if ($oid eq "1.3.6.1.2.1.31.1.1.1.7") {
		printIfHCInUcastPkts($newCount * 1024);
		$counter = 1;
	}

	if ($oid eq "1.3.6.1.2.1.31.1.1.1.15") {
		printIfHighSpeed();
	}
	
	loglog("@ARGV");

	if ($counter) {
		$count += 1;
		my ($s,$m) = writeCount($oid, $count);
		if (! $s) {
			print "Write counter failed: $m\n";
		}
	}
}